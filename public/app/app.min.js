(function () { 'use strict';

    angular
        .module('app', [

            /*
             |--------------------------------------------------------------------------
             | External Modules
             |--------------------------------------------------------------------------
             |
             | These are the modules created by the AngularJS team, open source
             | projects or third party modules.
             |
             */

                'ngAnimate', 'ngSanitize', 'permission', 'ui.router', 'satellizer', 'angular-loading-bar',
                '720kb.tooltips', 'ui.bootstrap',

            /*
             |--------------------------------------------------------------------------
             | Internal Modules
             |--------------------------------------------------------------------------
             |
             | These are the modules that are meant to be shared throughout the
             | app, either as some kind of config, data, reusable component,
             | view or partial, etc.
             |
             */

                // Shared
                'directives', 'filters', 'services', 'config', 'access-control', 'util',

                // $templateCache
                'viewsAndPartials',

                // Other
                'auth', 'home', 'profile', 'articles', 'category', 'ui', 'search', 'me',

                // Errors
                '404'

        ])
        .config(config)
        .run(run);

    /**
     * @type {string[]}
     */
    config.$inject = ['$urlRouterProvider', '$httpProvider', '$locationProvider', '$stateProvider'];

    /**
     * @type {string[]}
     */
    run.$inject = ['configService', 'userService'];

    /**
     * Configure app.
     *
     * @param $urlRouterProvider
     * @param $httpProvider
     * @param $locationProvider
     * @param $stateProvider
     */
    function config($urlRouterProvider, $httpProvider, $locationProvider, $stateProvider) {
        $stateProvider.state('app', {
            templateUrl: 'app/app.html'
        });

        $locationProvider.html5Mode({
            enabled: true,
            requireBase: false
        });

        $urlRouterProvider.otherwise(function($injector) {
            $injector.get('$state').go('app.404');
        });

        $httpProvider.interceptors.push('apiInterceptor');
    }

    /**
     *  Initialize global configuration.
     *  Initialize user if logged in.
     *
     * @param configService
     * @param userService
     */
    function run(configService, userService) {
        configService.initialize();
        userService.initialize();
    }

})();
(function () { 'use strict';

    angular
        .module('auth', [])
        .config(configuration);

    /**
     * @type {string[]}
     */
    configuration.$inject = ['$stateProvider', '$authProvider', 'config'];

    /**
     * @type {string[]}
     */
    logoutResolver.$inject = ['authService'];

    /**
     * @param $stateProvider
     * @param $authProvider
     * @param config
     */
    function configuration($stateProvider, $authProvider, config) {
        // Satellizer configuration that specifies which API
        // route the JWT should be retrieved from
        $authProvider.loginUrl = config.url + '/authenticate';

        $stateProvider
            .state('app.signup', {
                url: '/signup',
                data: {
                    permissions: {
                        except: ['isAuthenticated'],
                        redirectTo: 'app.home'
                    }
                },
                views: {
                    'head': {
                        templateUrl: 'app/auth/signup/head.html'
                    },
                    'wide-content': {
                        templateUrl: 'app/auth/signup/signup.html',
                        controller: 'SignupController as vm'
                    }
                }
            })
            .state('app.login', {
                url: '/login',
                data: {
                    permissions: {
                        except: ['isAuthenticated'],
                        redirectTo: 'app.home'
                    }
                },
                views: {
                    'head': {
                        templateUrl: 'app/auth/login/head.html'
                    },
                    'wide-content': {
                        templateUrl: 'app/auth/login/login.html',
                        controller: 'LoginController as vm'
                    }
                }
            })
            .state('app.logout', {
                url: '/logout',
                data: {
                    permissions: {
                        except: ['isAnonymous'],
                        redirectTo: 'app.login'
                    }
                },
                resolve: {
                    logoutResolver: logoutResolver
                }
            })
            .state('app.reset', {
                url: '/reset',
                views: {
                    'head': {
                        templateUrl: 'app/auth/password-forgot/head.html'
                    },
                    'wide-content': {
                        templateUrl: 'app/auth/password-forgot/password-forgot.html',
                        controller: 'PasswordForgotController as vm'
                    }
                }
            })
            .state('app.reset-password', {
                url: '/reset/:token',
                data: {
                    permissions: {
                        only: ['isTokenValid'],
                        redirectTo: 'app.reset'
                    }
                },
                views: {
                    'head': {
                        templateUrl: 'app/auth/password-reset/head.html'
                    },
                    'wide-content': {
                        templateUrl: 'app/auth/password-reset/password-reset.html',
                        controller: 'PasswordResetController as vm'
                    }
                }
            });
    }

    /**
     * @param authService
     * @returns {*}
     */
    function logoutResolver(authService) {
        return authService.logout();
    }

})();
(function() { 'use strict';

    angular
        .module('404', [])
        .config(config);

    /**
     * @type {string[]}
     */
    config.$inject = ['$stateProvider'];

    /**
     * @param $stateProvider
     */
    function config($stateProvider) {
        $stateProvider
            .state('app.404', {
                views: {
                    'wide-content': {
                        templateUrl: 'app/404/404.html',
                        controller: 'NotFoundController as vm'
                    }
                },
                params: {
                    message: null
                }
            });
    }

})();
(function () { 'use strict';

    angular
        .module('articles', [])
        .config(config);

    /**
     * @type {string[]}
     */
    config.$inject = ['$stateProvider'];

    /**
     * @type {string[]}
     */
    articleResolver.$inject = ['$stateParams', 'articleService'];

    /**
     * @type {string[]}
     */
    writeOrEditResolver.$inject = ['$state', 'articleService'];

    /**
     * @param $stateProvider
     */
    function config($stateProvider) {
        $stateProvider
            .state('app.article', {
                url: '/@:username/:articleSlug',
                views: {
                    'head': {
                        templateUrl: 'app/articles/article/head.html',
                        controller: 'ArticleHeadController as vm'
                    },
                    'article-content': {
                        templateUrl: 'app/articles/article/article.html',
                        controller: 'ArticleController as vm'
                    }
                },
                resolve: {
                    articleResolver: articleResolver
                }
            })
            .state('app.write', {
                url: '/write',
                data: {
                    permissions: {
                        only: ['isAuthenticated'],
                        redirectTo: 'app.home'
                    }
                },
                views: {
                    'head': {
                        templateUrl: 'app/articles/write-or-edit/head.html'
                    },
                    'wide-content': {
                        templateUrl: 'app/articles/write-or-edit/write-or-edit.html',
                        controller: 'WriteOrEditController as vm'
                    }
                },
                resolve: {
                    writeOrEditResolver: writeOrEditResolver
                }
            })
            .state('app.edit', {
                url: '/@:username/:articleSlug/edit?draft',
                data: {
                    permissions: {
                        only: ['isAuthenticated'],
                        redirectTo: 'app.home'
                    }
                },
                views: {
                    'head': {
                        templateUrl: 'app/articles/write-or-edit/head.html'
                    },
                    'wide-content': {
                        templateUrl: 'app/articles/write-or-edit/write-or-edit.html',
                        controller: 'WriteOrEditController as vm'
                    }
                },
                params: {
                    title: null,
                    body: null,
                    categories: null,
                    draft: {
                        value: 'false',
                        squash: true
                    }
                },
                resolve: {
                    writeOrEditResolver: writeOrEditResolver
                }
            });
    }

    /**
     * @param $stateParams
     * @param articleService
     * @returns {*}
     */
    function articleResolver($stateParams, articleService) {
        return articleService.getPublic($stateParams.articleSlug);
    }

    /**
     * @param $state
     * @param articleService
     * @returns {*}
     */
    function writeOrEditResolver($state, articleService) {
        // Fetch a draft
        if ($state.toParams.draft === 'true') {
            return articleService.getDraft($state.toParams.articleSlug);
        }
        // Fetch a public story
        else if ($state.toParams.draft === 'false') {
            return articleService.getPublic($state.toParams.articleSlug);
        }
    }

})();
(function() { 'use strict';

    angular
        .module('category', [])
        .config(config);

    /**
     * @type {string[]}
     */
    config.$inject = ['$stateProvider'];

    /**
     * @type {string[]}
     */
    categoryResolver.$inject = ['$stateParams', 'articleService'];

    /**
     * @param $stateProvider
     */
    function config($stateProvider) {
        $stateProvider
            .state('app.category', {
                url: '/category/:categorySlug',
                views: {
                    'head': {
                        templateUrl: 'app/category/head.html',
                        controller: 'CategoryHeadController as vm'
                    },
                    'header': {
                        templateUrl: 'app/category/header.html',
                        controller: 'CategoryHeaderController as vm'
                    },
                    'wide-content': {
                        templateUrl: 'app/category/content.html',
                        controller: 'CategoryContentController as vm'
                    }
                },
                resolve: {
                    categoryResolver: categoryResolver
                }
            });
    }

    function categoryResolver($stateParams, articleService) {
        return articleService.getAllForCategory($stateParams.categorySlug);
    }

})();
(function() { 'use strict';

    angular
        .module('profile', [])
        .config(config);

    /**
     * @type {string[]}
     */
    config.$inject = ['$stateProvider'];

    /**
     * @type {string[]}
     */
    profileResolver.$inject = ['$stateParams', 'profileService'];

    /**
     * @param $stateProvider
     */
    function config($stateProvider) {
        $stateProvider
            .state('app.profile', {
                url: '/@:username',
                views: {
                    'head': {
                        templateUrl: 'app/profile/head.html',
                        controller: 'ProfileHeadController as vm'
                    },
                    'header': {
                        templateUrl: 'app/profile/header.html',
                        controller: 'ProfileHeaderController as vm'
                    },
                    'wide-content': {
                        templateUrl: 'app/profile/content.html',
                        controller: 'ProfileContentController as vm'
                    }
                },
                resolve: {
                    profileResolver: profileResolver
                }
            });
    }

    /**
     * @param $stateParams
     * @param profileService
     * @returns {*}
     */
    function profileResolver($stateParams, profileService) {
        return profileService.getUser($stateParams.username);
    }

})();
(function() { 'use strict';

    angular
        .module('me', ['stories', 'settings'])
        .config(config);

    /**
     * @type {string[]}
     */
    config.$inject = ['$stateProvider'];

    /**
     * @param $stateProvider
     */
    function config($stateProvider) {
        $stateProvider
            .state('app.me', {
                url: '/me',
                abstract: true,
                data: {
                    permissions: {
                        only: ['isAuthenticated'],
                        redirectTo: 'app.home'
                    }
                }
            });
    }

})();
(function() { 'use strict';

    angular
        .module('home', [])
        .config(config);

    /**
     * @type {string[]}
     */
    config.$inject = ['$stateProvider'];

    /**
     * @type {string[]}
     */
    articlesResolver.$inject = ['articleService'];

    /**
     * @param $stateProvider
     */
    function config($stateProvider) {
        $stateProvider
            .state('app.home', {
                url: '/',
                views: {
                    'head': {
                        templateUrl: 'app/home/head.html'
                    },
                    'header': {
                        templateUrl: 'app/home/header.html',
                        controller: 'HomeHeaderController as vm'
                    },
                    'content': {
                        templateUrl: 'app/home/content.html',
                        controller: 'HomeContentController as vm'
                    }
                },
                resolve: {
                    articlesResolver: articlesResolver
                }
            });
    }

    /**
     * @param articleService
     * @returns {*}
     */
    function articlesResolver(articleService) {
        return articleService.get();
    }

})();
(function() { 'use strict';

    angular
        .module('search', [])
        .config(config)
        .run(run);

    /**
     * @type {string[]}
     */
    config.$inject = ['$stateProvider'];

    /**
     * @type {string[]}
     */
    run.$inject = ['$rootScope', '$state'];

    /**
     * @type {string[]}
     */
    searchResolver.$inject = ['$stateParams', 'searchService'];

    /**
     * @param $stateProvider
     */
    function config($stateProvider) {
        $stateProvider
            .state('app.search', {
                url: '/search?q',
                views: {
                    'search-header': {
                        templateUrl: 'app/search/header.html',
                        controller: 'SearchHeaderController as vm'
                    },
                    'wide-content': {
                        templateUrl: 'app/search/content.html'
                    }
                }
            })
            .state('app.search.results', {
                views: {
                    'results@app.search': {
                        templateUrl: 'app/search/results.html',
                        controller: 'SearchResultsController as vm'
                    }
                },
                resolve: {
                    searchResolver: searchResolver
                }
            });
    }

    /**
     * @param $rootScope
     * @param $state
     */
    function run($rootScope, $state) {
        // If '/search' is loaded via refresh or direct access from address bar and
        // it contains a query string, go to the results state with the query string.
        $rootScope.$on('$stateChangeStart', function(event, toState, toParams) {
            if (toState.name == 'app.search' && toParams.q) {
                event.preventDefault();

                $state.go('app.search.results', {
                    q: toParams.q
                });
            }
        });
    }

    /**
     * @param $stateParams
     * @param searchService
     * @returns {Promise|*|{src}|{options}}
     */
    function searchResolver($stateParams, searchService) {
        return searchService.all($stateParams.q);
    }

})();
(function() { 'use strict';

    angular.module('ui', [
        'ui.form-group-item',
        'ui.focus',
        'ui.affix',
        'ui.heading',
        'ui.modal',
        'ui.scroll-to-top-when',
        'ui.toggle-active',
        'ui.widget',
        'ui.profile-card',
        'ui.subview-menu',
        'ui.navbar',
        'ui.header-canopy',
        'ui.alert',
        'ui.message',
        'ui.when-scrolled'
    ]);

})();
(function () { 'use strict';

    angular
        .module('stories', [])
        .config(config)
        .run(run);

    /**
     * @type {string[]}
     */
    config.$inject = ['$stateProvider'];

    /**
     * @type {string[]}
     */
    run.$inject = ['redirectService'];

    /**
     * @type {string[]}
     */
    draftsResolver.$inject = ['articleService'];

    /**
     * @type {string[]}
     */
    publishedResolver.$inject = ['articleService'];

    /**
     * @type {string[]}
     */
    unpublishedResolver.$inject = ['articleService'];

    /**
     * @param $stateProvider
     */
    function config($stateProvider) {
        $stateProvider
            .state('app.me.stories', {
                url: '/stories',
                views: {
                    'head@app': {
                        templateUrl: 'app/me/stories/head.html'
                    },
                    'wide-content@app': {
                        templateUrl: 'app/me/stories/stories.html'
                    }
                },
                default: 'app.me.stories.drafts',
                params: {
                    menu: 'stories'
                }
            })
            .state('app.me.stories.drafts', {
                url: '/drafts',
                views: {
                    '@app.me.stories': {
                        templateUrl: 'app/me/stories/drafts/drafts.html',
                        controller: 'DraftsController as vm'
                    }
                },
                resolve: {
                    draftsResolver: draftsResolver
                }
            })
            .state('app.me.stories.published', {
                url: '/published',
                views: {
                    '@app.me.stories': {
                        templateUrl: 'app/me/stories/published/published.html',
                        controller: 'PublishedController as vm'
                    }
                },
                resolve: {
                    publishedResolver: publishedResolver
                }
            })
            .state('app.me.stories.unpublished', {
                url: '/unpublished',
                views: {
                    '@app.me.stories': {
                        templateUrl: 'app/me/stories/unpublished/unpublished.html',
                        controller: 'UnpublishedController as vm'
                    }
                },
                resolve: {
                    unpublishedResolver: unpublishedResolver
                }
            });
    }

    /**
     * @param redirectService
     */
    function run(redirectService) {
        redirectService.goDefaultChildState();
    }

    /**
     * @param articleService
     * @returns {*}
     */
    function draftsResolver(articleService) {
        return articleService.getUserDrafts();
    }

    /**
     * @param articleService
     * @returns {*}
     */
    function publishedResolver(articleService) {
        return articleService.getUserPublished();
    }

    /**
     * @param articleService
     * @returns {*}
     */
    function unpublishedResolver(articleService) {
        return articleService.getUserUnpublished();
    }

})();
(function() { 'use strict';

    angular
        .module('settings', [])
        .config(config)
        .run(run);

    /**
     * @type {string[]}
     */
    config.$inject = ['$stateProvider'];

    /**
     * @type {string[]}
     */
    run.$inject = ['redirectService'];

    /**
     * @param $stateProvider
     */
    function config($stateProvider) {
        $stateProvider
            .state('app.me.settings', {
                url: '/settings',
                views: {
                    'head@app': {
                        templateUrl: 'app/me/settings/head.html'
                    },
                    'wide-content@app': {
                        templateUrl: 'app/me/settings/settings.html'
                    }
                },
                default: 'app.me.settings.account',
                params: {
                    menu: 'settings'
                }
            })
            .state('app.me.settings.account', {
                url: '/account',
                views: {
                    '@app.me.settings': {
                        templateUrl: 'app/me/settings/account/account.html',
                        controller: 'SettingsAccountController as vm'
                    }
                }
            })
            .state('app.me.settings.password', {
                url: '/password',
                views: {
                    '@app.me.settings': {
                        templateUrl: 'app/me/settings/password/password.html',
                        controller: 'SettingsPasswordController as vm'
                    }
                }
            });
    }

    /**
     * @param redirectService
     */
    function run(redirectService) {
        redirectService.goDefaultChildState();
    }

})();
(function() { 'use strict';

    angular
        .module('config', [])
        .config(config);

    /**
     * @type {string[]}
     */
    config.$inject = ['tooltipsConfProvider', 'cfpLoadingBarProvider'];

    /**
     * @param tooltipsConfProvider
     * @param cfpLoadingBarProvider
     */
    function config(tooltipsConfProvider, cfpLoadingBarProvider) {
        tooltipsConfProvider.configure({
            'smart': true,
            'tooltip-hide-trigger': 'mouseleave',
            'speed': 'fast'
        });

        cfpLoadingBarProvider.includeSpinner = false;
    }

})();
(function() { 'use strict';

    angular
        .module('access-control', [])
        .run(run);

    /**
     * @type {string[]}
     */
    run.$inject = ['$auth', '$q', 'authService', 'PermissionStore', 'RoleStore', 'articleService'];

    /**
     * @param $auth
     * @param $q
     * @param authService
     * @param PermissionStore
     * @param RoleStore
     * @param articleService
     */
    function run($auth, $q, authService, PermissionStore, RoleStore, articleService) {
        /**
         * Set permissions.
         */
        initializePermissions();
        initializeRoles();

        /**
         * Define all permissions for app.
         */
        function initializePermissions() {
            PermissionStore.definePermission('isAnonymous', isAnonymous);
            PermissionStore.definePermission('isAuthenticated', isAuthenticated);
            PermissionStore.definePermission('isTokenValid', isTokenValid);
        }

        /**
         * Define all roles for the app.
         */
        function initializeRoles() {
            RoleStore.defineRole('isEditableByUser', [], isEditableByUser);
        }

        /**
         * Check if user is anonymous.
         *
         * @returns {boolean}
         */
        function isAnonymous() {
            return !$auth.isAuthenticated();
        }

        /**
         * Check if user is authenticated.
         *
         * @returns {boolean}
         */
        function isAuthenticated() {
            return $auth.isAuthenticated();
        }

        /**
         * Verify token in server.
         *
         * @param stateParams
         * @returns {*}
         */
        function isTokenValid(stateParams) {
            var deferred = $q.defer();

            authService
                .verifyToken(stateParams.token)
                .then(function(res) {
                    if (res.status == 200) {
                        deferred.resolve();
                    } else {
                        deferred.reject();
                    }
                })
                .catch(function() {
                    deferred.reject(); // Error with request
                });

            return deferred.promise;
        }

        /**
         * Verify the authenticated user with the article
         * they are trying to edit. Only the owner can access
         * the edit page of a given article.
         *
         * @param stateParams
         * @returns {*}
         */
        function isEditableByUser(stateParams) {
            var deferred = $q.defer();

            articleService
                .verifyEdit(stateParams.articleSlug)
                .then(function(res) {
                    if (res.status == 200) {
                        deferred.resolve();
                    } else {
                        deferred.reject();
                    }
                })
                .catch(function() {
                    deferred.reject();
                });

            return deferred.promise;
        }
    }

})();
(function() { 'use strict';

    angular.module('directives', []);

})();
(function() { 'use strict';

    angular
        .module('directives')
        .directive('viewTitle', viewTitle);

    /**
     * @type {string[]}
     */
    viewTitle.$inject = ['$rootScope', '$timeout'];

    /**
     * @param $rootScope
     * @param $timeout
     * @returns {{restrict: string, link: link}}
     */
    function viewTitle($rootScope, $timeout) {
        var title,
            directive = {
                restrict: 'EA',
                link: link
            };

        return directive;

        function link(scope, elem) {
            var tagName = elem[0].tagName.toLowerCase();

            // If we've been inserted as an element then we detach from the DOM because the caller
            // doesn't want us to have any visual impact in the document.
            // Otherwise, we're piggy-backing on an existing element so we'll just leave it alone.
            if (tagName === 'view-title' || tagName === 'viewTitle')
                elem.remove();

            scope.$watch(function() {
                return elem.text();
            }, function (newTitle) {
                $rootScope.viewTitle = title = newTitle;
            });

            scope.$on('$destroy', function () {
                title = undefined;

                // Wait until next digest cycle do delete viewTitle
                $timeout(function() {
                    if (!title) {
                        // No other view-title has reassigned title.
                        delete $rootScope.viewTitle;
                    }
                });
            });
        }
    }

})();
(function() { 'use strict';

    angular.module('filters', []);

})();
(function() { 'use strict';

    angular.module('util', []);

})();
(function() { 'use strict';

    angular.module('services', []);

})();
(function () {'use strict';

    angular.module('ui.affix', []);

})();
(function () { 'use strict';

    angular.module('ui.alert', []);

})();
(function() { 'use strict';

    angular.module('ui.form-group-item', []);

})();
(function () { 'use strict';

    angular.module('ui.heading', []);

})();
(function() { 'use strict';

    angular.module('ui.focus', []);

})();
(function() { 'use strict';

    angular.module('ui.header-canopy', []);

})();
(function () { 'use strict';

    angular.module('ui.modal', []);

})();
(function() { 'use strict';

    angular.module('ui.message', []);

})();
(function() { 'use strict';

    angular.module('ui.profile-card', []);

})();
(function() { 'use strict';

    angular.module('ui.navbar', []);

})();
(function() { 'use strict';

    angular.module('ui.subview-menu', []);

})();
(function () { 'use strict';

    angular.module('ui.scroll-to-top-when', []);

})();
(function() { 'use strict';

    angular.module('ui.widget', []);

})();
(function () { 'use strict';

    angular.module('ui.toggle-active', []);

})();
(function() { 'use strict';

    angular.module('ui.when-scrolled', []);

})();
(function () { 'use strict';

    angular
        .module('auth')
        .factory('authService', authService);

    /**
     * @type {string[]}
     */
    authService.$inject = ['$http', '$auth', '$state', 'apiService', 'userService', 'config'];

    /**
     * @param $http
     * @param $auth
     * @param $state
     * @param apiService
     * @param userService
     * @param config
     * @returns {{signup: signup, login: login, logout: logout, sendResetLink: sendResetLink, resetPassword: resetPassword, verifyToken: verifyToken}}
     */
    function authService($http, $auth, $state, apiService, userService, config) {
        var service = {
            signup: signup,
            login: login,
            logout: logout,
            sendResetLink: sendResetLink,
            resetPassword: resetPassword,
            verifyToken: verifyToken
        };

        return service;

        function signup(credentials) {
            return $http.post(config.url + '/signup', credentials);
        }

        function login(credentials) {
            return $auth.login(credentials).then(function() {
                return $http.get(config.url + '/authenticate/user')
                    .then(apiService.handleSuccess, apiService.handleError);
            });
        }

        function logout() {
            return $http.post(config.url + '/logout').then(function () { // Invalidate token in server
                return $auth.logout().then(function () { // Remove token from local storage
                    userService.removeUser(); // Remove user from local storage
                    $state.go('app.home');
                });
            });
        }

        function sendResetLink(email) {
            return $http.post(config.url + '/reset', email)
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function resetPassword(token, credentials) {
            return $http.post(config.url + '/reset/' + token, credentials)
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function verifyToken(token) {
            return $http.get(config.url + '/reset/verify/' + token);
        }
    }

})();
(function() { 'use strict';

    angular
        .module('404')
        .controller('NotFoundController', NotFoundController);

    /**
     * @type {string[]}
     */
    NotFoundController.$inject = ['$stateParams', '$state'];

    /**
     * @param $stateParams
     * @param $state
     * @constructor
     */
    function NotFoundController($stateParams, $state) {
        var vm = this;
        vm.message = $stateParams.message;
        vm.search = search;
        vm.q = '';

        function search() {
            $state.go('app.search.results', {q: vm.q});
        }
    }

})();
(function() { 'use strict';

    angular
        .module('articles')
        .directive('articles', articles);

    /**
     * @returns {{restrict: string, scope: {}, templateUrl: string, link: link}}
     */
    function articles() {
        var directive = {
            restrict: 'AE',
            scope: {},
            templateUrl: 'app/articles/articles.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            // Set the first interval of stories loaded from resolver
            scope.articles = scope.$eval(attrs.data) || null;

            scope.$on('stories:loaded', function(event, stories) {
                for (var i = 0; i < stories.length; i++) {
                    scope.articles.push(stories[i]);
                }
            });
        }
    }

})();
(function() { 'use strict';

    angular
        .module('articles')
        .factory('articleService', articleService);

    /**
     * @type {string[]}
     */
    articleService.$inject = ['$rootScope', '$http', 'config', 'apiService'];

    /**
     * @param $rootScope
     * @param $http
     * @param config
     * @param apiService
     * @returns {{loadStories: loadStories, get: get, getTopStories: getTopStories, getAllForCategory: getAllForCategory, getUserDrafts: getUserDrafts, getUserPublished: getUserPublished, getUserUnpublished: getUserUnpublished, getPublic: getPublic, getDraft: getDraft, createPublic: createPublic, saveDraft: saveDraft, edit: edit, verifyEdit: verifyEdit, publish: publish, unpublish: unpublish, forceDelete: forceDelete, heart: heart, unheart: unheart}}
     */
    function articleService($rootScope, $http, config, apiService) {
        var loadStoriesUrl = '/articles?page=2',
            hasMoreStoriesToLoad = true,
            service = {
            loadStories: loadStories,
            get: get,
            getTopStories: getTopStories,
            getAllForCategory: getAllForCategory,
            getUserDrafts: getUserDrafts,
            getUserPublished: getUserPublished,
            getUserUnpublished: getUserUnpublished,
            getPublic: getPublic,
            getDraft: getDraft,
            createPublic: createPublic,
            saveDraft: saveDraft,
            edit: edit,
            verifyEdit: verifyEdit,
            publish: publish,
            unpublish: unpublish,
            forceDelete: forceDelete,
            heart: heart,
            unheart: unheart
        };

        return service;

        function loadStories() {
            if (hasMoreStoriesToLoad) {
                service
                    .get(loadStoriesUrl)
                    .then(function (res) {
                        if (res.hasOwnProperty('message')) {
                            hasMoreStoriesToLoad = false;
                        } else {
                            loadStoriesUrl = res.nextPageUrl;
                            $rootScope.$broadcast('stories:loaded', res.articles);
                        }
                    })
                    .catch(function (res) {
                        console.log('Error loading more stories: ', res);
                    });
            }
        }

        function get(url) {
            return $http.get(config.url + (url || '/articles'))
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function getTopStories() {
            return $http.get(config.url + '/top-stories')
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function getAllForCategory(slug) {
            return $http.get(config.url + '/category/' + slug)
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function getUserDrafts() {
            return $http.get(config.url + '/articles/draft')
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function getUserPublished() {
            return $http.get(config.url + '/articles/published')
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function getUserUnpublished() {
            return $http.get(config.url + '/articles/unpublished')
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function getPublic(slug) {
            return $http.get(config.url + '/articles/' + slug)
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function getDraft(slug) {
            return $http.get(config.url + '/articles/' + slug + '/draft')
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function createPublic(data) {
            return $http.post(config.url + '/articles/create/public', data)
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function saveDraft(data) {
            return $http.put(config.url + '/articles/save/draft', data)
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function edit(data, slug) {
            return $http.put(config.url + '/articles/' + slug + '/edit', data)
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function verifyEdit(slug) {
            return $http.post(config.url + '/articles/' + slug + '/edit/verify')
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function publish(slug) {
            return $http.put(config.url + '/articles/' + slug + '/publish')
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function unpublish(slug) {
            return $http.put(config.url + '/articles/' + slug + '/unpublish')
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function forceDelete(slug) {
            return $http.put(config.url + '/articles/' + slug + '/delete')
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function heart(id) {
            return $http.put(config.url + '/articles/heart/' + id, null, {ignoreLoadingBar: true});
        }

        function unheart(id) {
            return $http.put(config.url + '/articles/unheart/' + id, null, {ignoreLoadingBar: true});
        }
    }

})();
(function () { 'use strict';

    angular
        .module('category')
        .controller('CategoryContentController', CategoryContentController);

    /**
     * @type {string[]}
     */
    CategoryContentController.$inject = ['categoryResolver'];

    /**
     * @param categoryResolver
     * @constructor
     */
    function CategoryContentController(categoryResolver) {
        var vm = this;
        vm.articles = categoryResolver.articles;
    }

})();
(function () { 'use strict';

    angular
        .module('category')
        .controller('CategoryHeadController', CategoryHeadController);

    /**
     * @type {string[]}
     */
    CategoryHeadController.$inject = ['categoryResolver'];

    /**
     * @param categoryResolver
     * @constructor
     */
    function CategoryHeadController(categoryResolver) {
        var vm = this;
        vm.category = categoryResolver.category;
    }

})();
(function() { 'use strict';

    angular
        .module('category')
        .controller('CategoryHeaderController', CategoryHeaderController);

    /**
     * @type {string[]}
     */
    CategoryHeaderController.$inject = ['categoryResolver'];

    /**
     * @param categoryResolver
     * @constructor
     */
    function CategoryHeaderController(categoryResolver) {
        var vm = this;
        vm.category = categoryResolver.category;
    }

})();
(function() { 'use strict';

    angular
        .module('profile')
        .controller('ProfileContentController', ProfileContentController);

    /**
     * @type {string[]}
     */
    ProfileContentController.$inject = ['profileResolver'];

    /**
     * @param profileResolver
     * @constructor
     */
    function ProfileContentController(profileResolver) {
        var vm = this;
        vm.articles = profileResolver.articles;
        vm.user = profileResolver.user;
        vm.hasContent = vm.articles.length > 0;
    }

})();
(function () { 'use strict';

    angular
        .module('profile')
        .controller('ProfileHeadController', ProfileHeadController);

    /**
     * @type {string[]}
     */
    ProfileHeadController.$inject = ['profileResolver'];

    /**
     * @param profileResolver
     * @constructor
     */
    function ProfileHeadController(profileResolver) {
        var vm = this;
        vm.user = profileResolver.user;
    }

})();
(function () { 'use strict';

    angular
        .module('profile')
        .controller('ProfileHeaderController', ProfileHeaderController);

    /**
     * @type {string[]}
     */
    ProfileHeaderController.$inject = ['profileResolver'];

    /**
     * @param profileResolver
     * @constructor
     */
    function ProfileHeaderController(profileResolver) {
        var vm = this;
        vm.user = profileResolver.user;
    }

})();
(function() { 'use strict';

    angular
        .module('profile')
        .factory('profileService', profileService);

    /**
     * @type {string[]}
     */
    profileService.$inject = ['$http', 'apiService', 'config'];

    /**
     * @param $http
     * @param apiService
     * @param config
     * @returns {{getUser: getUser}}
     */
    function profileService($http, apiService, config) {
        var service = {
            getUser: getUser
        };

        return service;

        function getUser(username) {
            return $http.get(config.url + '/profile/user/' + username)
                .then(apiService.handleSuccess, apiService.handleError);
        }
    }

})();
(function() { 'use strict';

    angular
        .module('home')
        .controller('HomeContentController', HomeContentController);

    /**
     * @type {string[]}
     */
    HomeContentController.$inject = ['articlesResolver', 'articleService'];

    /**
     * @param articlesResolver
     * @param articleService
     * @constructor
     */
    function HomeContentController(articlesResolver, articleService) {
        var vm = this;
        vm.articles = articlesResolver.articles;
        vm.topArticles = [];
        vm.categories = [];
        vm.loadStories = articleService.loadStories;

        getTopStories();
        addFeaturedCategories();

        function getTopStories() {
            articleService
                .getTopStories()
                .then(function(res) {
                    vm.topArticles = res.articles;
                })
                .catch(function(res) {
                    console.log('Error fetching top stories: ', res);
                });
        }

        function addFeaturedCategories() {
            for (var i = 0; i < vm.articles.length; i++) {
                for (var j = 0; j < vm.articles[i].categories.length; j++) {
                    if (!alreadyExists(vm.articles[i].categories[j])) {
                        vm.categories.push(vm.articles[i].categories[j]);
                    }
                }
            }
        }

        function alreadyExists(val) {
            return vm.categories.some(function (arrVal) {
                return Object.is(JSON.stringify(val), JSON.stringify(arrVal));
            });
        }
    }

})();


(function() { 'use strict';

    angular
        .module('home')
        .controller('HomeHeaderController', HomeHeaderController);

    /**
     * @constructor
     */
    function HomeHeaderController() {
        var vm = this;
    }

})();
(function () { 'use strict';

    angular
        .module('search')
        .controller('SearchHeaderController', SearchHeaderController);

    /**
     * @type {string[]}
     */
    SearchHeaderController.$inject = ['$state'];

    /**
     * @param $state
     * @constructor
     */
    function SearchHeaderController($state) {
        var vm = this;
        vm.search = search;
        vm.q = '';

        function search() {
            $state.go('app.search.results', {
                q: vm.q
            });
        }
    }

})();
(function() { 'use strict';

    angular
        .module('search')
        .controller('SearchResultsController', SearchResultsController);

    /**
     * @type {string[]}
     */
    SearchResultsController.$inject = ['searchResolver'];

    /**
     * @param searchResolver
     * @constructor
     */
    function SearchResultsController(searchResolver) {
        var vm = this;
        vm.articles = searchResolver.articles;
        vm.categories = searchResolver.categories;
        vm.users = searchResolver.users;
        vm.results = (vm.articles.length > 0 || vm.categories.length > 0 || vm.users.length > 0);
    }

})();
(function() { 'use strict';

    angular
        .module('search')
        .factory('searchService', searchService);

    /**
     * @type {string[]}
     */
    searchService.$inject = ['$http', 'apiService', 'config'];

    /**
     * @param $http
     * @param apiService
     * @param config
     * @returns {{all: all, findCategories: findCategories}}
     */
    function searchService($http, apiService, config) {
        var service = {
            all: all,
            findCategories: findCategories
        };

        return service;

        function all(q) {
            return $http.get(config.url + '/search?q=' + q)
                .then(apiService.handleSuccess, apiService.handleError);
        }

        function findCategories(q) {
            return $http.get(config.url + '/search/categories?q=' + q)
                .then(apiService.handleSuccess, apiService.handleError);
        }
    }

})();
(function() { 'use strict';

    angular
        .module('auth')
        .controller('LoginController', LoginController);

    /**
     * @type {string[]}
     */
    LoginController.$inject = ['$rootScope', '$state', 'userService', 'authService'];

    /**
     * @param $rootScope
     * @param $state
     * @param userService
     * @param authService
     * @constructor
     */
    function LoginController($rootScope, $state, userService, authService) {
        var vm = this;
        vm.login = login;

        /**
         * Log in with given credentials.
         *
         * @param credentials {email, password}
         */
        function login(credentials) {
            authService
                .login(credentials)
                .then(success, error);
        }

        /**
         * User successfully logged in on server; set user and go
         * to home state.
         *
         * @param res
         */
        function success(res) {
            userService.setUser(res.user);
            $state.go('app.home');
        }

        /**
         * User not logged in on server. Either validation errors
         * occurred, or something went wrong.
         *
         * @param res
         */
        function error(res) {
            if (res.data && !res.data.error) {
                vm.errors = res.data;
                console.log(vm.errors);
            } else if (res.data.error) {
                $rootScope.$broadcast('input:error', {
                    message: res.data.error.message
                });
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('auth')
        .controller('PasswordForgotController', PasswordForgotController);

    /**
     * @type {string[]}
     */
    PasswordForgotController.$inject = ['$rootScope', 'authService'];

    /**
     * @param $rootScope
     * @param authService
     * @constructor
     */
    function PasswordForgotController($rootScope, authService) {
        var vm = this;
        vm.sendResetLink = sendResetLink;

        /**
         * Send password reset link to users email.
         */
        function sendResetLink() {
            authService
                .sendResetLink({email: vm.email})
                .then(success, error);
        }

        /**
         * Password reset link successfully sent.
         *
         * @param res
         */
        function success(res) {
            vm.errors = [];

            $rootScope.$broadcast('input:success', {
                message: res.message
            });
        }

        /**
         * Error sending password reset link.
         *
         * @param res
         */
        function error(res) {
            if (res.data && !res.data.error) { // Validation errors
                vm.errors = res.data;
                console.log(vm.error);
            } else if (res.data.error) { // Can't find account with email
                $rootScope.$broadcast('input:error', {
                    message: res.data.error.message
                });
            }
        }
    }

})();
(function () { 'use strict';

    angular
        .module('auth')
        .controller('PasswordResetController', PasswordResetController);

    /**
     * @type {string[]}
     */
    PasswordResetController.$inject = ['$rootScope', '$stateParams', 'authService'];

    /**
     * @param $rootScope
     * @param $stateParams
     * @param authService
     * @constructor
     */
    function PasswordResetController($rootScope, $stateParams, authService) {
        var vm = this;
        vm.resetPassword = resetPassword;

        /**
         * Reset users password.
         */
        function resetPassword() {
            authService
                .resetPassword($stateParams.token, {
                    token: $stateParams.token,
                    password: vm.password,
                    passwordConfirmation: vm.passwordConfirmation
                })
                .then(success, error);
        }

        /**
         * Password was successfully reset.
         *
         * @param res
         */
        function success(res) {
            vm.errors = [];

            $rootScope.$broadcast('input:success', {
                message: res.message
            });
        }

        /**
         * Password could not be reset.
         *
         * @param res
         */
        function error(res) {
            if (res.data && !res.data.error) { // Validation errors
                vm.errors = res.data;
            } else if (res.data.password) { // Other validation errors
                vm.errors = res.data.password;
                console.log(vm.errors);
            } else if (res.data.error) { // Other server errors
                $rootScope.$broadcast('input:error', {
                    message: res.data.error.message
                });
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('auth')
        .controller('SignupController', SignupController);

    /**
     * @type {string[]}
     */
    SignupController.$inject = ['$controller', 'authService'];

    /**
     * @param $controller
     * @param authService
     * @constructor
     */
    function SignupController($controller, authService) {
        var vm = this;
        vm.signup = signup;

        function signup() {
            authService
                .signup({
                    name: vm.name,
                    email: vm.email,
                    password: vm.password,
                    passwordConfirmation: vm.passwordConfirmation
                })
                .then(success, error);
        }

        /**
         * User successfully registered, now log in.
         */
        function success() {
            $controller('LoginController')
                .login({
                    email: vm.email,
                    password: vm.password
                });
        }

        /**
         * Error registering user.
         *
         * @param res
         */
        function error(res) {
            if (res.data && !res.data.error) { // Validation errors
                vm.errors = res.data;
                console.log(vm.errors);
            } else if (res.data.error) { // Other server error
                vm.errors = res.data.error.message;
                console.log(vm.errors);
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui')
        .directive('hearts', hearts);

    /**
     * @type {string[]}
     */
    hearts.$inject = ['articleService'];

    /**
     * @param articleService
     * @returns {{restrict: string, scope: {}, templateUrl: string, link: link}}
     */
    function hearts(articleService) {
        var directive = {
            restrict: 'EA',
            scope: {},
            templateUrl: 'app/articles/hearts/hearts.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            var flag = false;
            var limit = 0;

            if (attrs.count) {
                scope.heartCount = attrs.count;
                scope.heart = heart;
            }

            function heart() {
                if (!flag && limit < 5)
                    articleService.heart(attrs.id).then(doHeart);
                else if (flag && limit < 5)
                    articleService.unheart(attrs.id).then(undoHeart);
            }

            function doHeart() {
                flag = true;
                scope.heartSuccess = true;
                scope.heartCount++;
                limit++;
            }

            function undoHeart() {
                flag = false;
                scope.heartSuccess = false;
                scope.heartCount--;
                limit++;
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('articles')
        .directive('categories', categories);

    /**
     * @returns {{restrict: string, templateUrl: string, link: link}}
     */
    function categories() {
        var directive = {
            restrict: 'EA',
            templateUrl: 'app/articles/categories/categories.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            if (attrs.data) {
                var data = scope.$eval(attrs.data);

                scope.categories = data;
                scope.inverse = attrs.inverse || false;
            }
        }
    }

})();
(function () { 'use strict';

    angular
        .module('articles')
        .controller('ArticleController', ArticleController);

    /**
     * @type {string[]}
     */
    ArticleController.$inject = ['articleResolver'];

    /**
     * @param articleResolver
     * @constructor
     */
    function ArticleController(articleResolver) {
        var vm = this;
        vm.article = articleResolver.article;
        vm.author = articleResolver.author;
    }

})();
(function () { 'use strict';

    angular
        .module('articles')
        .controller('ArticleHeadController', ArticleHeadController);

    /**
     * @type {string[]}
     */
    ArticleHeadController.$inject = ['articleResolver'];

    /**
     * @param articleResolver
     * @constructor
     */
    function ArticleHeadController(articleResolver) {
        var vm = this;
        vm.article = articleResolver.article;
    }

})();
(function() { 'use strict';

    angular
        .module('articles')
        .directive('editor', editor);

    /**
     * @type {string[]}
     */
    editor.$inject = ['$rootScope'];

    /**
     * @param $rootScope
     * @returns {{require: string, restrict: string, link: link}}
     */
    function editor($rootScope) {
        var directive = {
            require: '?ngModel',
            restrict: 'A',
            link: link
        };

        return directive;

        function link(scope, elem, attrs, ngModel) {
            var ck = CKEDITOR.replace(elem[0], {
                language: 'en',
                extraPlugins: 'confighelper,autogrow',
                placeholder: 'Share your story...'
            });

            if (!ngModel) throw 'ng-model is missing!';

            ck.on('instanceReady', function() {
                ck.setData(ngModel.$viewValue);

                $rootScope.$broadcast('editor:ready');
            });

            ck.on('change', updateModel);
            ck.on('key', updateModel);
            ck.on('dataReady', updateModel);

            ngModel.$render = function(value) {
                ck.setData(ngModel.$viewValue);
            };

            function updateModel() {
                scope.$apply(function() {
                    ngModel.$setViewValue(ck.getData());
                });
            }
        }
    }

})();
(function () { 'use strict';

    angular
        .module('articles')
        .controller('WriteOrEditController', WriteOrEditController);

    /**
     * @type {string[]}
     */
    WriteOrEditController.$inject = ['$window', '$rootScope', '$scope', '$stateParams', '$state', '$timeout', 'writeOrEditResolver', 'articleService', 'searchService', 'modalService'];

    /**
     * @param $window
     * @param $rootScope
     * @param $scope
     * @param $stateParams
     * @param $state
     * @param $timeout
     * @param writeOrEditResolver
     * @param articleService
     * @param searchService
     * @param modalService
     * @constructor
     */
    function WriteOrEditController($window, $rootScope, $scope, $stateParams, $state, $timeout, writeOrEditResolver, articleService, searchService, modalService) {
        var vm = this,
            VM_DATA = { // Constant representing the initial untouched editor data (for comparison purposes)
                id: '',
                title: '',
                body: '',
                categoryIdList: []
            },
            EDIT_MODE = false,
            WRITE_MODE = false;
        vm.q = '';
        vm.categoriesSelected = []; // List of categories selected by user, or passed in from edit mode
        vm.categoriesFromSearch = []; // List of categories returned from server during search
        vm.data = {
            id: '',
            title: '',
            body: '',
            categoryIdList: [] // List of category ID's to send to server on submit
        };
        vm.submit = submit;
        vm.search = search;
        vm.addCategory = addCategory;
        vm.removeCategory = removeCategory;

        switch ($state.current.name) {
            case 'app.write':
                initializeWriteMode();
                break;
            case 'app.edit':
                initializeEditMode();
                break;
        }

        function initializeWriteMode() {
            WRITE_MODE = true;
        }

        function initializeEditMode() {
            EDIT_MODE = true;

            setViewModelData(writeOrEditResolver.article);
        }

        // Save if user closes browser/navigates away from app
        $window.onbeforeunload = function () {
            save();

            return null; // Prevents alert box in browser from showing
        };

        // Create a constant string value of the vm.data for comparison later.
        $scope.$on('editor:ready', function () {
            VM_DATA = JSON.stringify(vm.data);
        });

        // Watch state change and handle unsaved changes
        $scope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
            var isEditorUnchanged = (VM_DATA === JSON.stringify(vm.data));

            // User has made updates to the data being edited,
            // or the empty editor is now dirty
            if (!isEditorUnchanged) {
                event.preventDefault();

                var modalOptions = {
                    actionButtonText: 'Save',
                    closeButtonText: "Don't save",
                    headerText: 'Save',
                    bodyText: "You've made some changes. Do you want to save?"
                };

                modalService
                    .showModal({}, modalOptions)
                    .then(function () {
                        save();

                        goToLeavingState();
                    })
                    .catch(goToLeavingState);
            }

            function goToLeavingState() {
                $state
                    .go(toState.name, toParams, {
                        notify: false
                    })
                    .then(function () {
                        $rootScope.$broadcast('$stateChangeSuccess', toState, toParams, fromState, fromParams);
                    });
            }
        });

        // Search for categories as the user types
        $scope.$watch('vm.q', function (newVal) {
            if (!newVal || newVal.length <= 1) return;

            $timeout(function () {
                // If search string is still the same, retrieve data.
                if (newVal === vm.q) vm.search();
            }, 1000);
        });

        function setViewModelData(data) {
            vm.data.id = data.id;
            vm.data.title = data.title;
            vm.data.body = data.body;

            if (data.categories) {
                for (var i = 0; i < data.categories.length; i++) {
                    addCategory(data.categories[i]);
                }
            }
        }

        function addCategory(category) {
            // Only add category id to categoryIdList array if not yet existing
            if (vm.data.categoryIdList.indexOf(category.id) === -1) {
                vm.data.categoryIdList.push(category.id);
            }

            // Only add category object to categoriesSelected array if not yet existing
            var categoryDoesNotExist = true;
            for (var i = 0; i < vm.categoriesSelected.length; i++) {
                if (vm.categoriesSelected[i].id === category.id) {
                    categoryDoesNotExist = false;
                    break;
                }
            }
            if (categoryDoesNotExist) {
                vm.categoriesSelected.push(category);
            }
        }

        function removeCategory(categoryId) {
            // Remove category id from categoryIdList array
            var listIndex = vm.data.categoryIdList.indexOf(categoryId);
            if (listIndex > -1) {
                vm.data.categoryIdList.splice(listIndex, 1);
            }

            // Remove category object from categoriesSelected array
            for (var i = 0; i < vm.categoriesSelected.length; i++) {
                if (vm.categoriesSelected[i].id === categoryId) {
                    vm.categoriesSelected.splice(i, 1);
                }
            }
        }

        function search() {
            searchService
                .findCategories(vm.q)
                .then(function (res) {
                    vm.categoriesFromSearch = res.categories;
                })
                .catch(function (res) {
                    console.log('Error searching for categories: ', res);
                });
        }

        function save() {
            // On write mode
            if (WRITE_MODE) {
                saveDraft();
            }
            // On edit mode
            else if (EDIT_MODE) {
                // Editing a draft
                if ($stateParams.draft === 'true') {
                    saveDraft();
                }
                // Editing a public story
                else if ($stateParams.draft === 'false') {
                    savePublic();
                }
            }
        }

        function saveDraft() {
            articleService
                .saveDraft(vm.data)
                .then(function(res) {
                    $rootScope.$broadcast('message', {
                        message: res.message
                    });
                })
                .catch(function (res) {
                    console.log("Error saving draft: ", res);
                });
        }

        function savePublic() {
            articleService
                .edit(vm.data, $stateParams.articleSlug)
                .then(function(res) {
                    $rootScope.$broadcast('message', {
                        message: res.message
                    });
                })
                .catch(function (res) {
                    console.log('Error editing article: ', res);
                });
        }

        function submit() {
            // Editor is not empty, continue publishing
            if (vm.data.title.length > 0 || vm.data.body.length > 0 || vm.data.categoryIdList.length > 0) {

                // On write mode OR on edit mode editing a draft
                if ($state.current.name === 'app.write' || $stateParams.draft === 'true') {
                    articleService
                        .createPublic(vm.data)
                        .then(function(res) {
                            goToArticle(res.article);
                        })
                        .catch(function (res) {
                            console.log('Error creating article: ', res);
                        });
                }
                // On edit mode (editing a published story)
                else if ($state.current.name === 'app.edit' && $stateParams.draft === 'false') {
                    articleService
                        .edit(vm.data, $stateParams.articleSlug)
                        .then(function(res) {
                            goToArticle(res.article);

                            $rootScope.$broadcast('message', {
                                message: res.message
                            });
                        })
                        .catch(function (res) {
                            console.log('Error editing article: ', res);
                        });
                }

            }
            // Editor is empty, do not publish, show errors
            else {
                vm.errors = {
                    title: true,
                    body: true
                };

                // Wait a second and then reset the errors
                //
                // This removes the 'shake' class from the div's so that when the form is
                // submitted again the class can be re-added and the elements will shake again.
                $timeout(function () {
                    vm.errors = {};
                }, 1000);
            }
        }

        function goToArticle(article) {
            $state
                .go('app.article', {
                    username: article.author.username,
                    articleSlug: article.slug
                }, {
                    notify: false // Notify false to ignore $stateChangeStart event that watches editor
                })
                .then(function() {
                    $rootScope.$broadcast('$stateChangeSuccess');
                });
        }
    }

})();
(function() { 'use strict';

    angular
        .module('articles')
        .directive('topStories', topStories);

    /**
     * @returns {{restrict: string, scope: {}, templateUrl: string, link: link}}
     */
    function topStories() {
        var directive = {
            restrict: 'A',
            scope: {},
            templateUrl: 'app/articles/top-stories/top-stories.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            if (attrs.data) {
                var data = scope.$eval(attrs.data);
                scope.articles = data;
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('me')
        .factory('meStoriesService', meStoriesService);

    /**
     * @returns {{removeFromCollection: removeFromCollection}}
     */
    function meStoriesService() {
        var service = {
            removeFromCollection: removeFromCollection
        };

        return service;

        function removeFromCollection(collection, slug) {
            for (var i = 0; i < collection.length; i++) {
                if (collection[i].slug == slug) {
                    collection.splice(i, 1);
                }
            }

            return collection;
        }
    }

})();
(function() { 'use strict';

    angular
        .module('config')
        .constant('config', {
            url: 'http://' + window.location.hostname + '/api/v1',
            version: '1.0.0'
        })
        .config(config)
        .factory('configService', configService);

    /**
     * @type {string[]}
     */
    config.$inject = ['$provide', 'cfpLoadingBarProvider'];

    /**
     * @type {string[]}
     */
    configService.$inject = ['$rootScope', '$document'];

    /**
     * @param $provide
     * @param cfpLoadingBarProvider
     */
    function config($provide) {
        // Decorating '$state' with 'toState', 'toParams', 'fromState' and 'fromParams' for ease of use
        // throughout the app without where listening for stateChange events is not possible/ideal.
        $provide.decorator('$state', ["$delegate", "$rootScope", function($delegate, $rootScope) {
            $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                $delegate.toState = toState;
                $delegate.toParams = toParams;
                $delegate.fromState = fromState;
                $delegate.fromParams = fromParams;
            });

            return $delegate;
        }]);
    }

    /**
     * @param $rootScope
     * @param $document
     * @returns {{initialize: initialize, prepareDocument: prepareDocument}}
     */
    function configService($rootScope, $document) {
        var service = {
            initialize: initialize,
            prepareDocument: prepareDocument
        };

        return service;

        function initialize() {
            service.prepareDocument();
        }

        function prepareDocument() {
            // Scroll to top on new state
            $rootScope.$on("$stateChangeSuccess", function () {
                $document[0].body.scrollTop = $document[0].documentElement.scrollTop = 0;
            });
        }
    }

})();
(function() { 'use strict';

    angular
        .module('directives')
        .directive('viewHead', viewHead);

    /**
     * @type {string[]}
     */
    viewHead.$inject = ['$document'];

    /**
     * @param $document
     * @returns {{restrict: string, link: link}}
     */
    function viewHead($document) {
        var head = angular.element($document[0].head),
            directive = {
                restrict: 'A',
                link: link
            };

        return directive;

        function link(scope, elem) {
            // Move the element into the head of the document.
            // Although the physical location of the document changes, the element remains
            // bound to the scope in which it was declared, so it can refer to variables from
            // the view scope if necessary.
            head.append(elem);

            // When the scope is destroyed, remove the element.
            // This is on the assumption that we're being used in some sort of view scope.
            // It doesn't make sense to use this directive outside of the view, and nor does it
            // make sense to use it inside other scope-creating directives like ng-repeat.
            scope.$on('$destroy', function () {
                elem.remove();
            });
        }
    }

})();
(function() { 'use strict';

    angular
        .module('filters')
        .filter('escapeHtml', escapeHtml);

    /**
     * @returns {filter}
     */
    function escapeHtml() {
        var entityMap = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': '&quot;',
            "'": '&#39;',
            "/": '&#x2F;'
        };

        return filter;

        function filter(html) {
            return String(html).replace(/[&<>"'\/]/g, function (s) {
                return entityMap[s];
            });
        }
    }

})();
(function() { 'use strict';

    angular
        .module('filters')
        .filter('shorten', shorten);

    function shorten() {
        return filter;

        function filter(value, wordwise, max, tail) {
            if (!value) return '';

            max = parseInt(max);

            if (!max || value.length <= max) return value;

            value = value.substr(0, max);

            if (wordwise) {
                var lastplace = value.lastIndexOf(' ');

                if (lastplace != -1)
                    value = value.substr(0, lastplace);
            }

            return value + (tail || '&hellip;');
        }
    }

})();
(function() { 'use strict';

    angular
        .module('util')
        .factory('util', util);

    /**
     * @returns {{}}
     */
    function util() {
        var service = {};

        return service;
    }

})();
(function() { 'use strict';

    angular
        .module('services')
        .factory('apiInterceptor', apiInterceptor);

    /**
     * @type {string[]}
     */
    apiInterceptor.$inject = ['$q', '$injector'];

    /**
     * @param $q
     * @param $injector
     * @returns {{request: request, requestError: requestError, response: response, responseError: responseError}}
     */
    function apiInterceptor($q, $injector) {
        var service = {
            request: request,
            requestError: requestError,
            response: response,
            responseError: responseError
        };

        return service;

        // Called before a request is sent, capable of mutating the request object
        function request(config) {
            return config;
        }

        function requestError(config) {
            return config;
        }

        // Called when an $http request succeeds, is passed the results object
        function response(res) {
            return res;
        }

        // Called if an $http method fails
        function responseError(res) {
            if (res.status == 404) {
                $injector.get('$state').go('app.404', {
                    message: res.data.error.message
                });
            }

            return $q.reject(res);
        }
    }

})();
(function () { 'use strict';

    angular
        .module('services')
        .factory('apiService', apiService);

    /**
     * @type {string[]}
     */
    apiService.$inject = ['$q'];

    /**
     * @param $q
     * @returns {{handleSuccess: handleSuccess, handleError: handleError}}
     */
    function apiService($q) {
        var service = {
            handleSuccess: handleSuccess,
            handleError: handleError
        };

        return service;

        function handleSuccess(res) {
            if (typeof res.data === 'object')
                return res.data;

            handleError(res);
        }

        function handleError(res) {
            return $q.reject(res);
        }
    }

})();
(function() { 'use strict';

    angular
        .module('services')
        .factory('redirectService', redirectService);

    /**
     * @type {string[]}
     */
    redirectService.$inject = ['$rootScope', '$state'];

    /**
     * @param $rootScope
     * @param $state
     * @returns {{goDefaultChildState: goDefaultChildState}}
     */
    function redirectService($rootScope, $state) {
        var service = {
            goDefaultChildState: goDefaultChildState
        };

        return service;

        // This is used for states that have sub-menus. Each sub-menu
        // should have it's own state, and a default child state is set
        // in the state to be redirected to using this function.
        function goDefaultChildState() {
            $rootScope.$on('$stateChangeStart', function(event, toState, toParams) {
                if (toState.default) {
                    event.preventDefault();

                    $state.go(toState.default, toParams);
                }
            });
        }
    }

})();
(function() { 'use strict';

    angular
        .module('services')
        .factory('userService', userService);

    /**
     * @type {string[]}
     */
    userService.$inject = ['$rootScope'];

    /**
     * @param $rootScope
     * @returns {{initialize: initialize, setUser: setUser, removeUser: removeUser}}
     */
    function userService($rootScope) {
        var service = {
            initialize: initialize,
            setUser: setUser,
            removeUser: removeUser
        };

        return service;

        /**
         * Checks the authenticated of user on initial page load.
         */
        function initialize() {
            var user = localStorage.getItem('user');

            if (user !== null)
                activateUserInRootScope(user, true);
            else
                disableUserInRootScope();

        }

        /**
         * Set and authenticate user.
         *
         * @param user
         */
        function setUser(user) {
            setUserInLocalStorage(user);
            activateUserInRootScope(user);
        }

        /**
         * Remove and de-authenticate user.
         */
        function removeUser() {
            removeUserFromLocalStorage();
            disableUserInRootScope();
        }

        /**
         * Set user in local storage.
         *
         * @param user
         */
        function setUserInLocalStorage(user) {
            localStorage.setItem('user', JSON.stringify(user));
        }

        /**
         * Remove user from local storage.
         */
        function removeUserFromLocalStorage() {
            localStorage.removeItem('user');
        }

        /**
         * Set and authenticate user in $rootScope.
         *
         * @param user
         * @param shouldParse (Optional; set to 'true' if user is string that needs
         *                     to be parsed to JSON. Usually needed if user is coming
         *                     from local storage.)
         */
        function activateUserInRootScope(user, shouldParse) {
            $rootScope.$broadcast('authenticated');

            if (shouldParse)
                $rootScope.currentUser = JSON.parse(user);
            else
                $rootScope.currentUser = user;

        }

        /**
         * Remove and de-authenticate user from $rootScope.
         */
        function disableUserInRootScope() {
            $rootScope.$broadcast('unauthenticated');
            $rootScope.currentUser = null;
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.affix')
        .directive('uiAffix', uiAffix);

    /**
     * @type {string[]}
     */
    uiAffix.$inject = ['$timeout'];

    /**
     * @returns {{restrict: string, link: link}}
     */
    function uiAffix($timeout) {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link(scope, elem) {
            var navbar = angular.element(document.querySelector('#navbar')),
                header = angular.element(document.querySelector('#header')),
                searchHeader = angular.element(document.querySelector('#search-header')),
                topHeight;

            $timeout(function () {
                topHeight = navbar[0].offsetTop + header[0].offsetHeight || searchHeader[0].offsetHeight;

                elem.affix({
                    offset: {
                        top: topHeight
                    }
                });
            }, false);
        }
    }

})();
(function () { 'use strict';

    angular
        .module('ui.alert')
        .directive('uiAlert', uiAlert);

    /**
     * @returns {{restrict: string, templateUrl: string, link: link}}
     */
    function uiAlert() {
        var directive = {
            restrict: 'A',
            templateUrl: 'app/ui/alert/alert.html',
            link: link
        };

        return directive;

        function link(scope) {
            scope.$on('input:success', function(event, data) {
                scope.error = false;
                scope.success = true;
                scope.message = data.message;
            });

            scope.$on('input:error', function (event, data) {
                scope.success = false;
                scope.error = true;
                scope.message = data.message;
            });
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.form-group-item')
        .controller('FormGroupItemController', FormGroupItemController)
        .directive('uiFormGroupItem', uiFormGroupItem);

    /**
     * @constructor
     */
    function FormGroupItemController(){}

    /**
     * @returns {{restrict: string, scope: {model: string, errors: string, submit: string}, bindToController: boolean, controller: string, templateUrl: string, link: link}}
     */
    function uiFormGroupItem() {
        var directive = {
            restrict: 'A',
            scope: {
                model: '=',
                errors: '=',
                submit: '='
            },
            bindToController: true,
            controller: 'FormGroupItemController as vm',
            templateUrl: 'app/ui/form-group-item/form-group-item.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            scope.input = attrs.input || false;
            scope.textarea = attrs.textarea || false;
            scope.type = attrs.type || 'text';
            scope.label = attrs.label;
            scope.id = attrs.id;
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.heading')
        .directive('uiHeading', uiHeading);

    /**
     * @returns {{restrict: string, templateUrl: string, link: link}}
     */
    function uiHeading() {
        var directive = {
            restrict: 'EA',
            scope: {},
            templateUrl: 'app/ui/heading/heading.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            if (attrs.title) {
                scope.title = attrs.title;
                scope.bold = attrs.bold || false;
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.focus')
        .directive('uiFocus', uiFocus);

    /**
     * @returns {{restrict: string, link: link}}
     */
    function uiFocus() {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link(scope, elem) {
            elem.focus();
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('ui.header-canopy')
        .directive('uiHeaderCanopyCategory', uiHeaderCanopyCategory);

    /**
     * @returns {{restrict: string, templateUrl: string, link: link}}
     */
    function uiHeaderCanopyCategory() {
        var directive = {
            restrict: 'EA',
            templateUrl: 'app/ui/header-canopy/header-canopy-category.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            if (attrs.title && attrs.description) {
                scope.title = attrs.title;
                scope.description = attrs.description;
            } else {
                console.log('Missing title or description attribute in header-canopy-category directive!');
            }
        }
    }

})();
(function () { 'use strict';

    angular
        .module('ui.header-canopy')
        .directive('uiHeaderCanopyHome', uiHeaderCanopyHome);

    /**
     * @param $rootScope
     * @returns {{restrict: string, link: link}}
     */
    function uiHeaderCanopyHome() {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link(scope, elem) {
            scope.close = function() {
                elem.hide();
            };
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('ui.header-canopy')
        .directive('uiHeaderCanopyPlain', uiHeaderCanopyPlain);

    /**
     * @returns {{restrict: string, templateUrl: string, link: link}}
     */
    function uiHeaderCanopyPlain() {
        var directive = {
            restrict: 'EA',
            templateUrl: 'app/ui/header-canopy/header-canopy-plain.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            if (attrs.title) {
                scope.title = attrs.title;
            } else {
                console.log('Missing title or description attribute in header-canopy-plain directive!');
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.header-canopy')
        .directive('uiHeaderCanopyProfile', uiHeaderCanopyProfile);

    /**
     * @returns {{restrict: string, templateUrl: string, link: link}}
     */
    function uiHeaderCanopyProfile() {
        var directive = {
            restrict: 'EA',
            templateUrl: 'app/ui/header-canopy/header-canopy-profile.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            if (attrs.user) {
                var user = scope.$eval(attrs.user);

                scope.name = user.name;
                scope.bio = user.bio;
                scope.profileImage = user.profileImage;
            } else {
                console.log('Missing user attribute in header-canopy-profile directive!');
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.modal')
        .factory('modalService', modalService);

    /**
     * @type {string[]}
     */
    modalService.$inject = ['$uibModal'];

    /**
     * @param $uibModal
     * @returns {{showModal: showModal, show: show}}
     */
    function modalService($uibModal) {
        var modalDefaults = {
            backdrop: true,
            keyboard: true,
            animation: false,
            templateUrl: 'app/ui/modal/modal.html'
        }, modalOptions = {
            closeButtonText: 'Cancel',
            actionButtonText: 'Continue',
            headerText: 'Are you sure?',
            bodyText: 'This action may be irreversible.'
        }, service = {
            showModal: showModal,
            show: show
        };

        return service;

        function showModal(customModalDefaults, customModalOptions) {
            if (!customModalDefaults) customModalDefaults = {};

            customModalDefaults.backdrop = 'static';

            return service.show(customModalDefaults, customModalOptions);
        }

        function show(customModalDefaults, customModalOptions) {
            // Create temp objects to work with since we're in a singleton service
            var tempModalDefaults = {};
            var tempModalOptions = {};

            // Map angular-ui modal custom defaults to modal defaults defined in service
            angular.extend(tempModalDefaults, modalDefaults, customModalDefaults);

            // Map modal.html $scope custom properties to defaults define in service
            angular.extend(tempModalOptions, modalOptions, customModalOptions);

            if (!tempModalDefaults.controller) {
                tempModalDefaults.controller = tempModalDefaultsCtrl;
            }

            tempModalDefaultsCtrl.$inject = ['$scope', '$uibModalInstance'];

            function tempModalDefaultsCtrl($scope, $uibModalInstance) {
                $scope.modalOptions = tempModalOptions;

                $scope.modalOptions.ok = function (res) {
                    $uibModalInstance.close(res);
                };

                $scope.modalOptions.close = function (res) {
                    $uibModalInstance.dismiss('cancel');
                };
            }

            return $uibModal.open(tempModalDefaults).result;
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.message')
        .directive('uiMessage', uiMessage);

    /**
     * @type {string[]}
     */
    uiMessage.$inject = ['$timeout'];

    /**
     * @param $timeout
     * @param $window
     * @returns {{restrict: string, templateUrl: string, replace: boolean, link: link}}
     */
    function uiMessage($timeout) {
        var directive = {
            restrict: 'A',
            templateUrl: 'app/ui/message/message.html',
            replace: true,
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            scope.$on('message', function (event, data) {
                scope.message = data.message;
                slideDown();

                $timeout(function () {
                    slideUp();
                }, 5000);
            });

            function slideDown() {
                elem.animate({
                    top: '0px'
                }, 100);
            }

            function slideUp() {
                elem.animate({
                    top: '-500px'
                }, 100);
            }
        }
    }

})();
(function () { 'use strict';

    angular
        .module('ui.profile-card')
        .directive('uiProfileCardSm', uiProfileCardSm);

    /**
     * @returns {{restrict: string, templateUrl: string, link: link}}
     */
    function uiProfileCardSm() {
        var directive = {
            restrict: 'EA',
            templateUrl: 'app/ui/profile-card/profile-card-sm.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            if (attrs.user) {
                var user = scope.$eval(attrs.user);
                var articleDate = attrs.articleDate;
                var viewCount = attrs.viewCount;

                scope.profileImage = user.profileImage;
                scope.username = user.username;
                scope.name = user.name;
                scope.bio = user.bio;
                scope.date = articleDate;
                scope.viewCount = viewCount;
                scope.hoverTemplate = '<div class="profile-card-hover">' +
                                            '<div class="profile-card-hover--content">' +
                                                '<a href="/@' + scope.username + '">' +
                                                    '<h1>' + scope.name + '</h1>' +
                                                '</a>' +
                                                '<p>' + scope.bio + '</p>' +
                                            '</div>' +
                                            '<div class="profile-card-hover--image">' +
                                                '<a href="/@' + scope.username + '" title="View the profile of ' + scope.name + '">' +
                                                    '<img class="avatar md" src="' + scope.profileImage + '">' +
                                                '</a>' +
                                            '</div>' +
                                            '<div class="clearfix"></div>' +
                                            '<div class="profile-card-hover--footer">' +
                                                '<a class="btn btn-primary text-center" href="/@' + scope.username + '">Visit profile</a>' +
                                            '</div>' +
                                        '</div>';
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.profile-card')
        .directive('uiProfileCard', uiProfileCard);

    /**
     * @returns {{restrict: string, templateUrl: string, link: link}}
     */
    function uiProfileCard() {
        var directive = {
            restrict: 'EA',
            templateUrl: 'app/ui/profile-card/profile-card.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            if (attrs.user) {
                var user = scope.$eval(attrs.user);

                scope.profileImage = user.profileImage;
                scope.username = user.username;
                scope.name = user.name;
                scope.bio = user.bio;
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.navbar', [])
        .directive('uiNavScroll', uiNavScroll);

    /**
     * @type {string[]}
     */
    uiNavScroll.$inject = ['$window', '$timeout'];

    /**
     * @param $window
     * @param $timeout
     * @returns {{restrict: string, link: link}}
     */
    function uiNavScroll($window, $timeout) {
        var directive =  {
            restrict: 'A',
            link: link
        };

        return directive;

        function link(scope, element) {
            var windowEl = angular.element($window);
            var delta = 50;
            var lastScrollTop = 0;

            element.bind('mouseover', mouseover);

            windowEl.on('scroll', scroll);

            function mouseover() {
                element.removeClass('closed');

                return $timeout((function () {
                    return element.css({
                        overflow: 'visible'
                    });
                }), 150);
            }

            function scroll() {
                var st = windowEl.scrollTop();

                // Check if at top of page
                if (st === 0)
                    element.removeClass('shadow');
                else
                    element.addClass('shadow');

                if (Math.abs(lastScrollTop - st) <= delta)
                    return;

                // Check if scrolling down
                if (st > lastScrollTop)
                    element.addClass('closed');
                else
                    element.removeClass('closed');


                lastScrollTop = st;
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.navbar')
        .controller('NavbarController', NavbarController);

    /**
     * @type {string[]}
     */
    NavbarController.$inject = ['$state', '$scope'];

    /**
     * @param $state
     * @param $scope
     * @constructor
     */
    function NavbarController($state, $scope) {
        var vm = this;
        vm.writing = false;
        vm.search = search;
        vm.q = '';

        function search() {
            $state.go('app.search.results', {q: vm.q});
        }

        $scope.$watch(function() {
            return $state.current.name;
        }, function() {
            vm.writing = $state.current.name == 'app.write' || $state.current.name == 'app.edit';

            if ($state.current.name === 'app.home') {
                vm.addBoxedLayout = true;
            } else {
                vm.addBoxedLayout = false;
            }
        });
    }

})();
(function() { 'use strict';

    angular
        .module('ui.navbar')
        .directive('uiNavbar', uiNavbar);

    /**
     * @returns {{restrict: string, templateUrl: string, controller: string}}
     */
    function uiNavbar() {
        var directive = {
            restrict: 'EA',
            templateUrl: 'app/ui/navbar/navbar.html',
            controller: 'NavbarController as vm'
        };

        return directive;
    }

})();
(function() { 'use strict';

    angular
        .module('ui.subview-menu')
        .controller('SubviewMenuController', SubviewMenuController);

    /**
     * @type {string[]}
     */
    SubviewMenuController.$inject = ['subviewMenuService', '$scope', '$stateParams', '$state'];

    /**
     * @param subviewMenuService
     * @param $scope
     * @param $stateParams
     * @param $state
     * @constructor
     */
    function SubviewMenuController(subviewMenuService, $scope, $stateParams, $state) {
        var vm = this;
        vm.menu = [];
        vm.go = go;

        // Watch the change of the parent state of the subviews  to
        // select the proper menu based on the $stateParams.menu value.
        $scope.$watch(function() {
            return $stateParams.menu;
        }, function() {
            vm.menu = subviewMenuService.getMenu($stateParams.menu);
        });

        // Watch the change of the subview state and highlight the tab
        // that has the state value of the current subview state.
        $scope.$watch(function() {
            return $state.current.name;
        }, function() {
            highlightSelectedTab();
        });

        function highlightSelectedTab() {
            for (var i = 0; i < vm.menu.length; i++) {
                if (vm.menu[i].state == $state.current.name)
                    vm.menu[i].selected = true;
                else
                    vm.menu[i].selected = false;
            }
        }

        function go(tab) {
            $state.go(tab.state);
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.subview-menu')
        .directive('uiSubviewMenu', uiSubviewMenu);

    /**
     * @returns {{restrict: string, templateUrl: string, controller: string}}
     */
    function uiSubviewMenu() {
        var directive =  {
            restrict: 'EA',
            templateUrl: 'app/ui/subview-menu/subview-menu.html',
            controller: 'SubviewMenuController as vm'
        };

        return directive;
    }

})();
(function () { 'use strict';

    angular
        .module('ui.subview-menu')
        .factory('subviewMenuService', subviewMenuService);

    /**
     * @returns {{getMenu: getMenu}}
     */
    function subviewMenuService() {
        var allMenus = {
                'settings': [
                    {'state': 'app.me.settings.account', 'label': 'Account', selected: false},
                    {'state': 'app.me.settings.password', 'label': 'Password', selected: false}
                ],
                'stories': [
                    {'state': 'app.me.stories.drafts', 'label': 'Drafts', selected: false},
                    {'state': 'app.me.stories.published', 'label': 'Published', selected: false},
                    {'state': 'app.me.stories.unpublished', 'label': 'Unpublished', selected: false}
                ]
            },
            service = {
                getMenu: getMenu
            };

        return service;

        function getMenu(currentMenu) {
            return allMenus[currentMenu];
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.scroll-to-top-when')
        .directive('uiScrollToTopWhen', uiScrollToTopWhen);

    /**
     * @type {string[]}
     */
    uiScrollToTopWhen.$inject = ['$timeout'];

    /**
     * @param $timeout
     * @returns {{restrict: string, link: link}}
     */
    function uiScrollToTopWhen($timeout) {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            scope.$on(attrs.scrollToTopWhen, function() {
                $timeout(function () {
                    angular.element(elem)[0].scrollTop = 0;
                });
            });
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.widget')
        .controller('WidgetFooterController', WidgetFooterController);

    /**
     * @constructor
     */
    function WidgetFooterController() {}

})();
(function() { 'use strict';

    angular
        .module('ui.widget')
        .directive('uiWidgetFooter', uiWidgetFooter);

    /**
     * @returns {{restrict: string, scope: {submit: string}, bindToController: boolean, controller: string, templateUrl: string, link: link}}
     */
    function uiWidgetFooter() {
        var directive = {
            restrict: 'A',
            scope: {
                submit: '='
            },
            bindToController: true,
            controller: 'WidgetFooterController as vm',
            templateUrl: 'app/ui/widget/widget-footer.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            scope.text = attrs.text || null;
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.widget')
        .directive('uiWidgetHeader', uiWidgetHeader);

    /**
     * @returns {{restrict: string, templateUrl: string, link: link}}
     */
    function uiWidgetHeader() {
        var directive = {
            restrict: 'A',
            templateUrl: 'app/ui/widget/widget-header.html',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            scope.title = attrs.title || null;
            scope.description = attrs.description || null;
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.toggle-active')
        .directive('uiToggleActive', uiToggleActive);

    /**
     * @returns {{restrict: string, link: link}}
     */
    function uiToggleActive() {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link(scope, elem) {
            elem.bind('click', function() {
                elem.toggleClass('active');
            });
        }
    }

})();
(function() { 'use strict';

    angular
        .module('ui.when-scrolled')
        .directive('uiWhenScrolled', uiWhenScrolled);

    uiWhenScrolled.$inject = ['$window', '$document'];

    /**
     * @returns {{restrict: string, link: link}}
     */
    function uiWhenScrolled($window, $document) {
        var directive = {
            restrict: 'A',
            link: link
        };

        return directive;

        function link(scope, elem, attrs) {
            var windowEl = angular.element($window),
                canLoadOnScroll = true;

            windowEl.on('scroll', function() {
                if (canLoadOnScroll) {
                    if ((windowEl.scrollTop() + windowEl.height()) >= ($document.height() / 2)) {
                        canLoadOnScroll = false;
                        scope.$apply(attrs.uiWhenScrolled);
                    }
                }
            });

            scope.$on('stories:loaded', function() {
                canLoadOnScroll = true;
            });
        }
    }

})();
(function () { 'use strict';

    angular
        .module('stories')
        .controller('DraftsController', DraftsController);

    /**
     * @type {string[]}
     */
    DraftsController.$inject = ['draftsResolver', 'meStoriesService', 'articleService', 'modalService', '$rootScope'];

    /**
     * @param draftsResolver
     * @param meStoriesService
     * @param articleService
     * @param modalService
     * @param $rootScope
     * @constructor
     */
    function DraftsController(draftsResolver, meStoriesService, articleService, modalService, $rootScope) {
        var vm = this;
        vm.drafts = draftsResolver.drafts;
        vm.message = draftsResolver.message || "You have no drafts.";
        vm.forceDelete = forceDelete;

        function forceDelete(slug) {
            var modalOptions = {
                actionButtonText: 'Delete',
                headerText: 'Delete',
                bodyText: 'Deleted drafts are gone forever. Are you sure?'
            };

            modalService
                .showModal({}, modalOptions)
                .then(function () {
                    articleService
                        .forceDelete(slug)
                        .then(function(res) {
                            meStoriesService.removeFromCollection(vm.drafts, slug);

                            $rootScope.$broadcast('message', {
                                message: res.message
                            });
                        })
                        .catch(function(res) {
                            console.log(res);
                        });
                });
        }
    }

})();
(function () { 'use strict';

    angular
        .module('stories')
        .controller('PublishedController', PublishedController);

    /**
     * @type {string[]}
     */
    PublishedController.$inject = ['publishedResolver', 'meStoriesService', 'articleService', 'modalService', '$rootScope'];

    /**
     * @param publishedResolver
     * @param meStoriesService
     * @param articleService
     * @param modalService
     * @param $rootScope
     * @constructor
     */
    function PublishedController(publishedResolver, meStoriesService, articleService, modalService, $rootScope) {
        var vm = this;
        vm.articles = publishedResolver.articles;
        vm.message = publishedResolver.message || "You haven't published any stories yet.";
        vm.unpublish = unpublish;

        function unpublish(slug) {
            vm.articleSlug = slug;

            var modalOptions = {
                actionButtonText: 'Unpublish',
                headerText: 'Unpublish',
                bodyText: 'Unpublished stories are hidden from the public.'
            };

            modalService
                .showModal({}, modalOptions)
                .then(function() {
                    articleService
                        .unpublish(slug)
                        .then(function(res) {
                            meStoriesService.removeFromCollection(vm.articles, slug);

                            $rootScope.$broadcast('message', {
                                message: res.message
                            });
                        })
                        .catch(function(res) {
                            console.log(res);
                        });
                });
        }
    }

})();
(function () {
    'use strict';

    angular
        .module('stories')
        .controller('UnpublishedController', UnpublishedController);

    /**
     * @type {string[]}
     */
    UnpublishedController.$inject = ['unpublishedResolver', 'meStoriesService', 'articleService', 'modalService', '$rootScope'];

    /**
     * @param unpublishedResolver
     * @param meStoriesService
     * @param articleService
     * @param modalService
     * @param $rootScope
     * @constructor
     */
    function UnpublishedController(unpublishedResolver, meStoriesService, articleService, modalService, $rootScope) {
        var vm = this;
        vm.articles = unpublishedResolver.articles;
        vm.message = unpublishedResolver.message || "You don't have any unpublished stories.";
        vm.publish = publish;
        vm.forceDelete = forceDelete;

        function publish(slug) {
            var modalOptions = {
                actionButtonText: 'Publish',
                headerText: 'Publish',
                bodyText: 'Published stories are viewable by the public.'
            };

            modalService
                .showModal({}, modalOptions)
                .then(function () {
                    articleService
                        .publish(slug)
                        .then(function(res) {
                            meStoriesService.removeFromCollection(vm.articles, slug);

                            $rootScope.$broadcast('message', {
                                message: res.message
                            });
                        })
                        .catch(function(res) {
                            console.log(res);
                        });
                });
        }

        function forceDelete(slug) {
            var modalOptions = {
                actionButtonText: 'Delete',
                headerText: 'Delete',
                bodyText: 'Deleted stories are gone forever. Are you sure?'
            };

            modalService
                .showModal({}, modalOptions)
                .then(function () {
                    articleService
                        .forceDelete(slug)
                        .then(function(res) {
                            meStoriesService.removeFromCollection(vm.articles, slug);

                            $rootScope.$broadcast('message', {
                                message: res.message
                            });
                        })
                        .catch(function(res) {
                            console.log(res);
                        });
                });
        }
    }

})();
(function () { 'use strict';

    angular
        .module('settings')
        .controller('SettingsPasswordController', SettingsPasswordController);

    /**
     * @type {string[]}
     */
    SettingsPasswordController.$inject = ['$rootScope', 'settingsPasswordService'];

    /**
     * @param $rootScope
     * @param settingsPasswordService
     * @constructor
     */
    function SettingsPasswordController($rootScope, settingsPasswordService) {
        var vm = this;
        vm.submit = submit;

        function submit() {
            settingsPasswordService.changePassword({
                username: $rootScope.currentUser.username,
                email: $rootScope.currentUser.email,
                password: vm.password,
                newPassword: vm.newPassword,
                newPasswordConfirmation: vm.newPasswordConfirmation
            }).then(success, error);
        }

        /**
         * Successfully updated password.
         *
         * @param res
         */
        function success(res) {
            vm.errors = [];

            $rootScope.$broadcast('input:success', {
                message: res.message
            });
        }

        /**
         * Error updating password.
         *
         * @param res
         */
        function error(res) {
            if (res.data && !res.data.error) { // Validation errors
                vm.errors = res.data;
                console.log(vm.errors);
            } else if (res.data.error) { // Incorrect password
                $rootScope.$broadcast('input:error', {
                    message: res.data.error.message
                });
            }
        }
    }

})();
(function () { 'use strict';

    angular
        .module('settings')
        .factory('settingsPasswordService', settingsPasswordService);

    /**
     * @type {string[]}
     */
    settingsPasswordService.$inject = ['$http', 'config', 'apiService'];

    /**
     * @param $http
     * @param config
     * @param apiService
     * @returns {{changePassword: changePassword}}
     */
    function settingsPasswordService($http, config, apiService) {
        var service = {
            changePassword: changePassword
        };

        return service;

        function changePassword(credentials) {
            return $http.put(config.url + '/settings/password', credentials)
                .then(apiService.handleSuccess, apiService.handleError);
        }
    }

})();
(function () { 'use strict';

    angular
        .module('settings')
        .controller('SettingsAccountController', SettingsAccountController);

    /**
     * @type {string[]}
     */
    SettingsAccountController.$inject = ['$rootScope', 'settingsAccountService', 'userService'];

    /**
     * @param $rootScope
     * @param settingsAccountService
     * @param userService
     * @constructor
     */
    function SettingsAccountController($rootScope, settingsAccountService, userService) {
        var vm = this;
        vm.updateUsername = updateUsername;
        vm.updateBio = updateBio;
        vm.username = $rootScope.currentUser.username;
        vm.bio = $rootScope.currentUser.bio;

        /**
         * Change users username.
         */
        function updateUsername() {
            settingsAccountService
                .updateUsername({username: vm.username})
                .then(success, error);
        }

        /**
         * Change users bio.
         */
        function updateBio() {
            settingsAccountService
                .updateBio({bio: vm.bio})
                .then(success, error);
        }

        /**
         * Successfully updated data.
         *
         * @param res
         */
        function success(res) {
            vm.errors = [];

            $rootScope.$broadcast('input:success', {
                message: res.message
            });

            userService.setUser(res.user);
        }

        /**
         * Error updating data.
         *
         * @param res
         */
        function error(res) {
            if (res.data && !res.data.error) { // Validation errors
                vm.errors = res.data;
            } else if (res.data.error) {
                $rootScope.$broadcast('input:error', {
                    message: res.data.error.message
                });
            }
        }
    }

})();
(function() { 'use strict';

    angular
        .module('settings')
        .factory('settingsAccountService', settingsAccountService);

    /**
     * @type {string[]}
     */
    settingsAccountService.$inject = ['$http', 'apiService', 'config'];

    /**
     * @param $http
     * @param apiService
     * @param config
     * @returns {{updateUsername: updateUsername, updateBio: updateBio}}
     */
    function settingsAccountService($http, apiService, config) {
        var service = {
            updateUsername: updateUsername,
            updateBio: updateBio
        };

        return service;

        /**
         * Update users username.
         *
         * @param data
         * @returns {*}
         */
        function updateUsername(data) {
            return $http.put(config.url + '/settings/account/username', data)
                .then(apiService.handleSuccess, apiService.handleError);
        }

        /**
         * Update users bio.
         *
         * @param data
         * @returns {*}
         */
        function updateBio(data) {
            return $http.put(config.url + '/settings/account/bio', data)
                .then(apiService.handleSuccess, apiService.handleError);
        }
    }

})();
//# sourceMappingURL=data:application/json;base64,
